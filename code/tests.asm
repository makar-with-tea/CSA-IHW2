.include "macroslib.s"

.data 
# значения x для тестов 1-6
_x1: .double 22.222
_x2: .double 1.3
_x3: .double -15.3
_x4: .double -113
_x5: .double 114
_x6: .double 0.0
# прочие значения
n: .double 1.0  # начальное значение числа, используемого при вычислении знаменателя элемента степенного ряда
sum: .double 1.0  # начальное значение для суммы
numerator: .double 1.0  # начальное значение числителя текущего элемента степенного ряда
denominator: .double 1.0 # начальное значение знаменателя текущего элемента степенного ряда
mes_error: .double 0.0005  # допустимая погрешность
_1: .double 1.0 # просто единичка для удобства

.text
# тест 1. Для сохранения переменных использованы другие регистры, чем в основной программе, чтобы показать
# универсальность подпрограмм.
fld fs1 _x1 t0
fld fs2 sum t0
fld fs3 mes_error t0
fld fs4 numerator t0
fld fs5 denominator t0
fld fs0 n t0
print_str("TEST 1. x = ")
print_double(fs1)
# вычисление суммы степенного ряда ch(x) с помощью цикла
loop1:
	# сохранение в нужные регистры подаваемых в подпрограмму аргументов
	fmv.d fa0 fs1 # 1 аргумент - x
	fmv.d fa1 fs4 # 2 аргумент - numerator, числитель предыдущего элемента ряда
	fmv.d fa2 fs5 # 3 аргумент - denominator, знаменатель предыдущего элемента ряда
	fmv.d fa3 fs0 # 4 аргумент - n, число, используемое при вычислении знаменателя элемента степенного ряда
	jal next_term # вызов подпрограммы next_term с вышеуказанными аргументами
	fmv.d fs4 fa1
	fmv.d fs5 fa2
	fmv.d fs0 fa3
	fadd.d fs2 fs2 fa4 # прибавление к сумме ряда текущего элемента ряда
	# сохранение в нужные регистры подаваемых в подпрограмму аргументов
	fmv.d fa0 fs2 # 1 аргумент - sum, сумма ряда
	fmv.d fa1 fs3 # 2 аргумент - mes_error, допустимая погрешность
	fmv.d fa2 fa4 # 3 аргумент - term, текущий элемент ряда
	jal check_accuracy # вызов подпрограммы check_accuracy с вышеуказанными аргументами
	# возвращаемое значение - булевое значение выражения (mes_error * sum < term) в регистре a0
	bgtz a0 loop1 # переход на следущую итерацию цикла, если погрешность больше допустимой
print_str("ch(x) = ")
print_double(fs2) # вывод результата вычислений

# тест 2
fld fs1 _x2 t0
# возвращение значений переменных к начальным
fld fs2 _1 t0
fld fs4 _1 t0
fld fs5 _1 t0
fld fs0 _1 t0
fsd fs1 _x1 t0
fsd fs2 sum t0
fsd fs4 numerator t0
fsd fs5 denominator t0
fsd fs0 n t0
print_str("TEST 2. x = ")
print_double(fs1)
# вычисление суммы степенного ряда ch(x) с помощью цикла
loop2:
	# сохранение в нужные регистры подаваемых в подпрограмму аргументов
	fmv.d fa0 fs1 # 1 аргумент - x
	fmv.d fa1 fs4 # 2 аргумент - numerator, числитель предыдущего элемента ряда
	fmv.d fa2 fs5 # 3 аргумент - denominator, знаменатель предыдущего элемента ряда
	fmv.d fa3 fs0 # 4 аргумент - n, число, используемое при вычислении знаменателя элемента степенного ряда
	jal next_term # вызов подпрограммы next_term с вышеуказанными аргументами
	fmv.d fs4 fa1
	fmv.d fs5 fa2
	fmv.d fs0 fa3
	fadd.d fs2 fs2 fa4 # прибавление к сумме ряда текущего элемента ряда
	# сохранение в нужные регистры подаваемых в подпрограмму аргументов
	fmv.d fa0 fs2 # 1 аргумент - sum, сумма ряда
	fmv.d fa1 fs3 # 2 аргумент - mes_error, допустимая погрешность
	fmv.d fa2 fa4 # 3 аргумент - term, текущий элемент ряда
	jal check_accuracy # вызов подпрограммы check_accuracy с вышеуказанными аргументами
	# возвращаемое значение - булевое значение выражения (mes_error * sum < term) в регистре a0
	bgtz a0 loop2 # переход на следущую итерацию цикла, если погрешность больше допустимой
print_str("ch(x) = ")
print_double(fs2) # вывод результата вычислений

# тест 3
fld fs1 _x3 t0
# возвращение значений переменных к начальным
fld fs2 _1 t0
fld fs4 _1 t0
fld fs5 _1 t0
fld fs0 _1 t0
fsd fs1 _x1 t0
fsd fs2 sum t0
fsd fs4 numerator t0
fsd fs5 denominator t0
fsd fs0 n t0
print_str("TEST 3. x = ")
print_double(fs1)
# вычисление суммы степенного ряда ch(x) с помощью цикла
loop3:
	# сохранение в нужные регистры подаваемых в подпрограмму аргументов
	fmv.d fa0 fs1 # 1 аргумент - x
	fmv.d fa1 fs4 # 2 аргумент - numerator, числитель предыдущего элемента ряда
	fmv.d fa2 fs5 # 3 аргумент - denominator, знаменатель предыдущего элемента ряда
	fmv.d fa3 fs0 # 4 аргумент - n, число, используемое при вычислении знаменателя элемента степенного ряда
	jal next_term # вызов подпрограммы next_term с вышеуказанными аргументами
	fmv.d fs4 fa1
	fmv.d fs5 fa2
	fmv.d fs0 fa3
	fadd.d fs2 fs2 fa4 # прибавление к сумме ряда текущего элемента ряда
	# сохранение в нужные регистры подаваемых в подпрограмму аргументов
	fmv.d fa0 fs2 # 1 аргумент - sum, сумма ряда
	fmv.d fa1 fs3 # 2 аргумент - mes_error, допустимая погрешность
	fmv.d fa2 fa4 # 3 аргумент - term, текущий элемент ряда
	jal check_accuracy # вызов подпрограммы check_accuracy с вышеуказанными аргументами
	# возвращаемое значение - булевое значение выражения (mes_error * sum < term) в регистре a0
	bgtz a0 loop3 # переход на следущую итерацию цикла, если погрешность больше допустимой
print_str("ch(x) = ")
print_double(fs2) # вывод результата вычислений

# тест 4
fld fs1 _x4 t0
# возвращение значений переменных к начальным
fld fs2 _1 t0
fld fs4 _1 t0
fld fs5 _1 t0
fld fs0 _1 t0
fsd fs1 _x1 t0
fsd fs2 sum t0
fsd fs4 numerator t0
fsd fs5 denominator t0
fsd fs0 n t0
print_str("TEST 4. x = ")
print_double(fs1)
# вычисление суммы степенного ряда ch(x) с помощью цикла
loop4:
	# сохранение в нужные регистры подаваемых в подпрограмму аргументов
	fmv.d fa0 fs1 # 1 аргумент - x
	fmv.d fa1 fs4 # 2 аргумент - numerator, числитель предыдущего элемента ряда
	fmv.d fa2 fs5 # 3 аргумент - denominator, знаменатель предыдущего элемента ряда
	fmv.d fa3 fs0 # 4 аргумент - n, число, используемое при вычислении знаменателя элемента степенного ряда
	jal next_term # вызов подпрограммы next_term с вышеуказанными аргументами
	fmv.d fs4 fa1
	fmv.d fs5 fa2
	fmv.d fs0 fa3
	fadd.d fs2 fs2 fa4 # прибавление к сумме ряда текущего элемента ряда
	# сохранение в нужные регистры подаваемых в подпрограмму аргументов
	fmv.d fa0 fs2 # 1 аргумент - sum, сумма ряда
	fmv.d fa1 fs3 # 2 аргумент - mes_error, допустимая погрешность
	fmv.d fa2 fa4 # 3 аргумент - term, текущий элемент ряда
	jal check_accuracy # вызов подпрограммы check_accuracy с вышеуказанными аргументами
	# возвращаемое значение - булевое значение выражения (mes_error * sum < term) в регистре a0
	bgtz a0 loop4 # переход на следущую итерацию цикла, если погрешность больше допустимой
print_str("ch(x) = ")
print_double(fs2) # вывод результата вычислений

# тест 5
fld fs1 _x5 t0
# возвращение значений переменных к начальным
fld fs2 _1 t0
fld fs4 _1 t0
fld fs5 _1 t0
fld fs0 _1 t0
fsd fs1 _x1 t0
fsd fs2 sum t0
fsd fs4 numerator t0
fsd fs5 denominator t0
fsd fs0 n t0
print_str("TEST 5. x = ")
print_double(fs1)
# вычисление суммы степенного ряда ch(x) с помощью цикла
loop5:
	# сохранение в нужные регистры подаваемых в подпрограмму аргументов
	fmv.d fa0 fs1 # 1 аргумент - x
	fmv.d fa1 fs4 # 2 аргумент - numerator, числитель предыдущего элемента ряда
	fmv.d fa2 fs5 # 3 аргумент - denominator, знаменатель предыдущего элемента ряда
	fmv.d fa3 fs0 # 4 аргумент - n, число, используемое при вычислении знаменателя элемента степенного ряда
	jal next_term # вызов подпрограммы next_term с вышеуказанными аргументами
	fmv.d fs4 fa1
	fmv.d fs5 fa2
	fmv.d fs0 fa3
	fadd.d fs2 fs2 fa4 # прибавление к сумме ряда текущего элемента ряда
	# сохранение в нужные регистры подаваемых в подпрограмму аргументов
	fmv.d fa0 fs2 # 1 аргумент - sum, сумма ряда
	fmv.d fa1 fs3 # 2 аргумент - mes_error, допустимая погрешность
	fmv.d fa2 fa4 # 3 аргумент - term, текущий элемент ряда
	jal check_accuracy # вызов подпрограммы check_accuracy с вышеуказанными аргументами
	# возвращаемое значение - булевое значение выражения (mes_error * sum < term) в регистре a0
	bgtz a0 loop5 # переход на следущую итерацию цикла, если погрешность больше допустимой
print_str("ch(x) = ")
print_double(fs2) # вывод результата вычислений

# тест 6
fld fs1 _x6 t0
# возвращение значений переменных к начальным
fld fs2 _1 t0
fld fs4 _1 t0
fld fs5 _1 t0
fld fs0 _1 t0
fsd fs1 _x1 t0
fsd fs2 sum t0
fsd fs4 numerator t0
fsd fs5 denominator t0
fsd fs0 n t0
print_str("TEST 6. x = ")
print_double(fs1)
# вычисление суммы степенного ряда ch(x) с помощью цикла
loop6:
	# сохранение в нужные регистры подаваемых в подпрограмму аргументов
	fmv.d fa0 fs1 # 1 аргумент - x
	fmv.d fa1 fs4 # 2 аргумент - numerator, числитель предыдущего элемента ряда
	fmv.d fa2 fs5 # 3 аргумент - denominator, знаменатель предыдущего элемента ряда
	fmv.d fa3 fs0 # 4 аргумент - n, число, используемое при вычислении знаменателя элемента степенного ряда
	jal next_term # вызов подпрограммы next_term с вышеуказанными аргументами
	fmv.d fs4 fa1
	fmv.d fs5 fa2
	fmv.d fs0 fa3
	fadd.d fs2 fs2 fa4 # прибавление к сумме ряда текущего элемента ряда
	# сохранение в нужные регистры подаваемых в подпрограмму аргументов
	fmv.d fa0 fs2 # 1 аргумент - sum, сумма ряда
	fmv.d fa1 fs3 # 2 аргумент - mes_error, допустимая погрешность
	fmv.d fa2 fa4 # 3 аргумент - term, текущий элемент ряда
	jal check_accuracy # вызов подпрограммы check_accuracy с вышеуказанными аргументами
	# возвращаемое значение - булевое значение выражения (mes_error * sum < term) в регистре a0
	bgtz a0 loop6 # переход на следущую итерацию цикла, если погрешность больше допустимой
print_str("ch(x) = ")
print_double(fs2) # вывод результата вычислений

li a7 10
ecall

.include "check_accuracy.s"
.include "next_term.s"